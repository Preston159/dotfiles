(defwidget bar [monworkspaces monitor]
  (centerbox :orientation "h"
    (left :monworkspaces monworkspaces
          :monitor monitor)
    (center)
    (right)))

(defwidget left [monworkspaces monitor]
  (box :orientation "h"
       :space-evenly false
    (workspaces :monworkspaces monworkspaces
                :monitor monitor)
    (systray :class "systray")))

(defwidget center []
  (window))

(defwidget right []
  (box :class "sidestuff"
       :orientation "h"
       :space-evenly false
       :halign "end"
    (power)
    (pointerbutton :onclick "pavucontrol &"
                   :text "üîä")
    (metric :label ""
            :value volume
            :onchange "amixer sset Master {}%")
    (metric :label "üêè"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "üíæ"
            :value {round((1 - (EWW_DISK[disk].free / EWW_DISK[disk].total)) * 100, 0)}
            :onchange "")
    (box "${time.hour}:${time.minute} ${time.dow} ${time.month} ${time.day}")))

(defwidget power []
  (pointerbutton :class "power-button"
                 :onclick "scripts/open-window-at-cursor power_menu -20 -20"
                 :text "üîå"))

(defwidget workspaces [monworkspaces monitor]
  (box :class "workspaces"
       :orientation "h"
       :space-evenly false
       :halign "start"
    (for workspace in monworkspaces
      (pointerbutton :class "${monitors[monitor].activeWorkspace.name == workspace ? 'active' : ''} ${monitors[monitor].specialWorkspace.name == '' ? '' : 'special-active'}"
                     :onclick "hyprctl dispatch workspace ${workspace}"
                     :text {workspace}))
    (for workspace in specialworkspaces
      (pointerbutton :class {monitors[monitor].specialWorkspace.name == workspace ? 'active' : ''}
                     :onclick "hyprctl dispatch togglespecialworkspace ${substring(workspace, 8, strlength(workspace) - 8)}"
                     :text {substring(workspace, 8, strlength(workspace) - 8)}))))

(defwidget window []
  (box :class "window-title"
       :orientation "h"
       :space-evenly false
       :halign "center"
    windowtitle))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))
