(defvar disk "/var/home")

(defwindow topbar_primary
           :monitor 2
           :geometry (geometry :x "0%"
                               :y "0px"
                               :width "100%"
                               :height "30px"
                               :anchor "top center")
           :stacking "fg"
           :wm-ignore false
           :exclusive true
  (bar :monworkspaces '[2,5,7,8,9]'
       :monitor 2))

(defwindow topbar_right
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "0px"
                               :width "100%"
                               :height "30px"
                               :anchor "top center")
           :stacking "fg"
           :wm-ignore false
           :exclusive true
  (bar :monworkspaces '[3,6,7,8,9]'
       :monitor 0))

(defwindow topbar_left
           :monitor 1
           :geometry (geometry :x "0%"
                               :y "0px"
                               :width "100%"
                               :height "30px"
                               :anchor "top center")
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
           :exclusive true
  (bar :monworkspaces '[1,4,7,8,9]'
       :monitor 1))

(defwidget bar [monworkspaces monitor]
  (centerbox :orientation "h"
    (workspaces :monworkspaces monworkspaces
                :monitor monitor)
    (window)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff"
       :orientation "h"
       :space-evenly false
       :halign "end"
    (power)
    (button :onclick "pavucontrol &"
      (box :class "label" "üîä"))
    (metric :label ""
            :value volume
            :onchange "amixer sset Master {}%")
    (metric :label "üêè"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "üíæ"
            :value {round((1 - (EWW_DISK[disk].free / EWW_DISK[disk].total)) * 100, 0)}
            :onchange "")
    (box "${time.hour}:${time.minute} ${time.dow} ${time.month} ${time.day}")))

(defwidget power []
  (button :class "power-button"
          :onclick "scripts/open-window-at-cursor power_menu -20 -20"
    (box :halign "center" "üîå")))

(defwidget workspaces [monworkspaces monitor]
  (box :class "workspaces"
       :orientation "h"
       :space-evenly false
       :halign "start"
    (for workspace in monworkspaces
      (button :class "workspace-${workspace} activeworkspace-${monitors[monitor].activeWorkspace.name}"
              :onclick "hyprctl dispatch workspace ${workspace}"
        {workspace}))
    (button :class "special ${monitors[monitor].specialWorkspace.name == '' ? 'empty' : ''}"
      {monitors[monitor].specialWorkspace.name =~ '^special:.+$' ? substring(monitors[monitor].specialWorkspace.name, 8, 1): ''})))

(defwidget window []
  (box :class "window-title"
       :orientation "h"
       :space-evenly false
       :halign "center"
    windowtitle))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget pointerbutton [onclick text]
  (eventbox :cursor "pointer"
    (button :onclick onclick text)))

(defwidget pointerbutton2v [onclick text text2]
  (eventbox :cursor "pointer"
    (button :onclick onclick  
      (box :orientation "v"
        (box :class "t1" text)
        (box :class "t2" text2)))))

(defpoll windowtitle :interval "1s"
  "hyprctl activewindow -j | jq -r .title")

(defpoll activeworkspace :interval "1s"
  "hyprctl activeworkspace -j | jq -r .id")

(defpoll monitors :interval "1s"
  "hyprctl monitors -j")

(defpoll workspacewindows :interval "1s"
  `hyprctl workspaces -j | jq '([1,2,3,4,5,6,7,8,9,"special:A","special:S","special:D"] | map({ key: .|tostring, value: 0}) | from_entries) + (map({ key: .name, value: .windows }) | from_entries)'`)

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "2s"
  `date +'{"hour":"%H","minute":"%M","dow":"%a","month":"%b","day":"%d"}'`)

(defwindow power_menu [mon x y]
           :geometry (geometry :x x
                               :y y)
           :monitor mon
  (box :orientation "v"
       :space-evenly true
    (button :onclick "shutdown -h now"
      (box "shutdown"))
    (button :onclick "shutdown -r now"
      (box "restart"))))

(defwindow workspace_selector [mon x y]
           :geometry (geometry :x x
                               :y y)
           :monitor mon
           :stacking "overlay"
           :focusable "none"
  (box :orientation "v"
       :space-evenly true
    (for workspaces in '[[1,2,3],[4,5,6],[7,8,9]]'
      (box :orientation "h"
           :space-evenly true
        (for workspace in workspaces
          (pointerbutton2v :onclick "hyprctl dispatch workspace ${workspace} & eww close workspace_selector"
                           :text workspace
                           :text2 {workspacewindows[workspace]}))))
    (box :orientation "h"
         :space-evenly true
      (for workspace in '["A","S", "D"]'
        (pointerbutton2v :onclick "hyprctl dispatch togglespecialworkspace ${workspace} & eww close workspace_selector"
                         :text workspace
                         :text2 {workspacewindows["special:${workspace}"]})))))
