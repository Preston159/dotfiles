(include "windows/workspaces_selector/workspaces_selector_widgets.yuck")

(defwindow workspace_selector [mon x y]
           :geometry (geometry :x x
                               :y y)
           :monitor mon
           :stacking "overlay"
           :focusable "none"
  (box :orientation "v"
       :space-evenly true
    (for workspaces in '[[1,2,3],[4,5,6],[7,8,9]]'
      (box :orientation "h"
           :space-evenly true
        (for workspace in workspaces
          (workspacebutton :onclick "hyprctl dispatch workspace ${workspace} & eww close workspace_selector"
                           :text workspace
                           :text2 {workspacewindows[workspace]}
                           :tooltipText {workspacewindowtitles[workspace] ?: ''}))))
    (box :orientation "h"
         :space-evenly true
      (for workspace in '["A","S", "D"]'
        (workspacebutton :onclick "hyprctl dispatch togglespecialworkspace ${workspace} & eww close workspace_selector"
                         :text workspace
                         :text2 {workspacewindows["special:${workspace}"]}
                         :tooltipText {workspacewindowtitles["special:${workspace}"] ?: ''})))))

(defpoll workspacewindows :interval "1s"
  `hyprctl workspaces -j | jq '([1,2,3,4,5,6,7,8,9,"special:A","special:S","special:D"] | map({ key: .|tostring, value: 0}) | from_entries) + (map({ key: .name, value: .windows }) | from_entries)'`)

(defpoll workspacewindowtitles :interval "1s"
  `hyprctl clients -j | jq '. | group_by(.workspace.name) | map({ key: .[0].workspace.name, value: map(.title + "\\n") | add }) | from_entries'`)
